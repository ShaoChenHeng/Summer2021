{"remainingRequest":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/src/components/dynamicPolygon.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/src/components/dynamicPolygon.vue","mtime":1626949065814},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/@vue/cli-service/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpzdmcgewogICAgZGlzcGxheTogYmxvY2s7Cn0KCnBvbHlnb24gewogICAgZmlsbDogIzQxYjg4MzsKfQpjaXJjbGUgewogICAgZmlsbDogdHJhbnNwYXJlbnQ7CiAgICBzdHJva2U6ICMzNTQ5NWU7Cn0KaW5wdXRbdHlwZT0icmFuZ2UiXSB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHdpZHRoOiAyNSU7CiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Owp9Cg=="},{"version":3,"sources":["dynamicPolygon.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dynamicPolygon.vue","sourceRoot":"src/components","sourcesContent":["<template>\n   \n    <div id=\"app\">\n        <svg width=\"200\" height=\"200\">\n            <polygon :points=\"points\"></polygon>\n            <circle cx=\"100\" cy=\"100\" r=\"90\"></circle>\n        </svg>\n\n        <label> Sides : {{sides}} </label>\n        <input type=\"range\" min=\"3\" max=\"500\" v-model.number=\"sides\" />\n        <label>Minimum Radius: {{minRadius}} % </label>\n        <input type=\"range\" min=\"0\" max=\"90\" v-model.number=\"minRadius\" />\n        <label>Update Interval: {{ updateInterval }} milliseconds</label>\n        <input type=\"range\" min=\"10\" max=\"2000\" v-model.number=\"updateInterval\" />\n    </div>\n    \n</template>\n\n\n<script>\nimport TweenLite from 'gsap'\nexport default {\n    name: 'dynamicPolygon',\n\n    data: function() {\n        var defaultSides = 10;\n        var stats = Array.apply(null, { length: defaultSides }).map(\n            function() {\n                return 100;\n            }\n        );\n\n        return {\n            stats: stats,\n            points: generatePoints(stats),\n            sides: defaultSides,\n            minRadius: 50,\n            interval: null,\n            updateInterval: 500\n        };\n    },\n\n    watch: {\n        sides: function(newSides, oldSides) {\n        var sidesDifference = newSides - oldSides;\n        if (sidesDifference > 0) {\n            for (var i = 1; i <= sidesDifference; i++) {\n            this.stats.push(this.newRandomValue());\n            }\n        } else {\n            var absoluteSidesDifference = Math.abs(sidesDifference);\n            for (var i = 1; i <= absoluteSidesDifference; i++) {\n            this.stats.shift();\n            }\n        }\n        },\n        stats: function(newStats) {\n            TweenLite.to(this.$data, this.updateInterval / 1000, {\n                points: generatePoints(newStats)\n            });\n        },\n        updateInterval: function() {\n            this.resetInterval();\n        }\n    },\n\n\n    mounted: function() {\n        this.resetInterval();\n    },\n\n\n    methods: {\n        randomizeStats: function() {\n            var vm = this;\n            this.stats = this.stats.map(function() {\n                return vm.newRandomValue();\n            });\n        },\n        newRandomValue: function() {\n            return Math.ceil(\n                this.minRadius + Math.random() * (100 - this.minRadius)\n            );\n        },\n        resetInterval: function() {\n            var vm = this;\n            clearInterval(this.interval);\n            this.randomizeStats();\n            this.interval = setInterval(function() {\n                vm.randomizeStats();\n            }, this.updateInterval);\n        }\n    },\n\n     \n\n}\n\n\nfunction valueToPoint(value, index, total) {\n    var x = 0;\n    var y = -value * 0.9;\n    var angle = ((Math.PI * 2) / total) * index;\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var tx = x * cos - y * sin + 100;\n    var ty = x * sin + y * cos + 100;\n    return { x: tx, y: ty };\n}\n\nfunction generatePoints(stats) {\n    var total = stats.length;\n    return stats .map(function(stat, index) {\n        var point = valueToPoint(stat, index, total);\n        return point.x + \",\" + point.y;\n    }) .join(\" \");\n}\n\n\n</script>\n\n<style>\n    svg {\n        display: block;\n    }\n    \n    polygon {\n        fill: #41b883;\n    }\n    circle {\n        fill: transparent;\n        stroke: #35495e;\n    }\n    input[type=\"range\"] {\n        display: block;\n        width: 25%;\n        margin-bottom: 15px;\n    }\n</style>    \n"]}]}