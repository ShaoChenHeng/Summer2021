{"remainingRequest":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/babel-loader/lib/index.js!/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/src/components/dynamicPolygon.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/src/components/dynamicPolygon.vue","mtime":1626949065814},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scheng/.emacs.d/site-lisp/emacs-application-framework/app/vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBUd2VlbkxpdGUgZnJvbSAnZ3NhcCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnZHluYW1pY1BvbHlnb24nLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICB2YXIgZGVmYXVsdFNpZGVzID0gMTA7CiAgICB2YXIgc3RhdHMgPSBBcnJheS5hcHBseShudWxsLCB7CiAgICAgIGxlbmd0aDogZGVmYXVsdFNpZGVzCiAgICB9KS5tYXAoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gMTAwOwogICAgfSk7CiAgICByZXR1cm4gewogICAgICBzdGF0czogc3RhdHMsCiAgICAgIHBvaW50czogZ2VuZXJhdGVQb2ludHMoc3RhdHMpLAogICAgICBzaWRlczogZGVmYXVsdFNpZGVzLAogICAgICBtaW5SYWRpdXM6IDUwLAogICAgICBpbnRlcnZhbDogbnVsbCwKICAgICAgdXBkYXRlSW50ZXJ2YWw6IDUwMAogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBzaWRlczogZnVuY3Rpb24gc2lkZXMobmV3U2lkZXMsIG9sZFNpZGVzKSB7CiAgICAgIHZhciBzaWRlc0RpZmZlcmVuY2UgPSBuZXdTaWRlcyAtIG9sZFNpZGVzOwoKICAgICAgaWYgKHNpZGVzRGlmZmVyZW5jZSA+IDApIHsKICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBzaWRlc0RpZmZlcmVuY2U7IGkrKykgewogICAgICAgICAgdGhpcy5zdGF0cy5wdXNoKHRoaXMubmV3UmFuZG9tVmFsdWUoKSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciBhYnNvbHV0ZVNpZGVzRGlmZmVyZW5jZSA9IE1hdGguYWJzKHNpZGVzRGlmZmVyZW5jZSk7CgogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGFic29sdXRlU2lkZXNEaWZmZXJlbmNlOyBpKyspIHsKICAgICAgICAgIHRoaXMuc3RhdHMuc2hpZnQoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzdGF0czogZnVuY3Rpb24gc3RhdHMobmV3U3RhdHMpIHsKICAgICAgVHdlZW5MaXRlLnRvKHRoaXMuJGRhdGEsIHRoaXMudXBkYXRlSW50ZXJ2YWwgLyAxMDAwLCB7CiAgICAgICAgcG9pbnRzOiBnZW5lcmF0ZVBvaW50cyhuZXdTdGF0cykKICAgICAgfSk7CiAgICB9LAogICAgdXBkYXRlSW50ZXJ2YWw6IGZ1bmN0aW9uIHVwZGF0ZUludGVydmFsKCkgewogICAgICB0aGlzLnJlc2V0SW50ZXJ2YWwoKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLnJlc2V0SW50ZXJ2YWwoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHJhbmRvbWl6ZVN0YXRzOiBmdW5jdGlvbiByYW5kb21pemVTdGF0cygpIHsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgdGhpcy5zdGF0cyA9IHRoaXMuc3RhdHMubWFwKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdm0ubmV3UmFuZG9tVmFsdWUoKTsKICAgICAgfSk7CiAgICB9LAogICAgbmV3UmFuZG9tVmFsdWU6IGZ1bmN0aW9uIG5ld1JhbmRvbVZhbHVlKCkgewogICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMubWluUmFkaXVzICsgTWF0aC5yYW5kb20oKSAqICgxMDAgLSB0aGlzLm1pblJhZGl1cykpOwogICAgfSwKICAgIHJlc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIHJlc2V0SW50ZXJ2YWwoKSB7CiAgICAgIHZhciB2bSA9IHRoaXM7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7CiAgICAgIHRoaXMucmFuZG9taXplU3RhdHMoKTsKICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICB2bS5yYW5kb21pemVTdGF0cygpOwogICAgICB9LCB0aGlzLnVwZGF0ZUludGVydmFsKTsKICAgIH0KICB9Cn07CgpmdW5jdGlvbiB2YWx1ZVRvUG9pbnQodmFsdWUsIGluZGV4LCB0b3RhbCkgewogIHZhciB4ID0gMDsKICB2YXIgeSA9IC12YWx1ZSAqIDAuOTsKICB2YXIgYW5nbGUgPSBNYXRoLlBJICogMiAvIHRvdGFsICogaW5kZXg7CiAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKTsKICB2YXIgc2luID0gTWF0aC5zaW4oYW5nbGUpOwogIHZhciB0eCA9IHggKiBjb3MgLSB5ICogc2luICsgMTAwOwogIHZhciB0eSA9IHggKiBzaW4gKyB5ICogY29zICsgMTAwOwogIHJldHVybiB7CiAgICB4OiB0eCwKICAgIHk6IHR5CiAgfTsKfQoKZnVuY3Rpb24gZ2VuZXJhdGVQb2ludHMoc3RhdHMpIHsKICB2YXIgdG90YWwgPSBzdGF0cy5sZW5ndGg7CiAgcmV0dXJuIHN0YXRzLm1hcChmdW5jdGlvbiAoc3RhdCwgaW5kZXgpIHsKICAgIHZhciBwb2ludCA9IHZhbHVlVG9Qb2ludChzdGF0LCBpbmRleCwgdG90YWwpOwogICAgcmV0dXJuIHBvaW50LnggKyAiLCIgKyBwb2ludC55OwogIH0pLmpvaW4oIiAiKTsKfQ=="},{"version":3,"sources":["dynamicPolygon.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n   \n    <div id=\"app\">\n        <svg width=\"200\" height=\"200\">\n            <polygon :points=\"points\"></polygon>\n            <circle cx=\"100\" cy=\"100\" r=\"90\"></circle>\n        </svg>\n\n        <label> Sides : {{sides}} </label>\n        <input type=\"range\" min=\"3\" max=\"500\" v-model.number=\"sides\" />\n        <label>Minimum Radius: {{minRadius}} % </label>\n        <input type=\"range\" min=\"0\" max=\"90\" v-model.number=\"minRadius\" />\n        <label>Update Interval: {{ updateInterval }} milliseconds</label>\n        <input type=\"range\" min=\"10\" max=\"2000\" v-model.number=\"updateInterval\" />\n    </div>\n    \n</template>\n\n\n<script>\nimport TweenLite from 'gsap'\nexport default {\n    name: 'dynamicPolygon',\n\n    data: function() {\n        var defaultSides = 10;\n        var stats = Array.apply(null, { length: defaultSides }).map(\n            function() {\n                return 100;\n            }\n        );\n\n        return {\n            stats: stats,\n            points: generatePoints(stats),\n            sides: defaultSides,\n            minRadius: 50,\n            interval: null,\n            updateInterval: 500\n        };\n    },\n\n    watch: {\n        sides: function(newSides, oldSides) {\n        var sidesDifference = newSides - oldSides;\n        if (sidesDifference > 0) {\n            for (var i = 1; i <= sidesDifference; i++) {\n            this.stats.push(this.newRandomValue());\n            }\n        } else {\n            var absoluteSidesDifference = Math.abs(sidesDifference);\n            for (var i = 1; i <= absoluteSidesDifference; i++) {\n            this.stats.shift();\n            }\n        }\n        },\n        stats: function(newStats) {\n            TweenLite.to(this.$data, this.updateInterval / 1000, {\n                points: generatePoints(newStats)\n            });\n        },\n        updateInterval: function() {\n            this.resetInterval();\n        }\n    },\n\n\n    mounted: function() {\n        this.resetInterval();\n    },\n\n\n    methods: {\n        randomizeStats: function() {\n            var vm = this;\n            this.stats = this.stats.map(function() {\n                return vm.newRandomValue();\n            });\n        },\n        newRandomValue: function() {\n            return Math.ceil(\n                this.minRadius + Math.random() * (100 - this.minRadius)\n            );\n        },\n        resetInterval: function() {\n            var vm = this;\n            clearInterval(this.interval);\n            this.randomizeStats();\n            this.interval = setInterval(function() {\n                vm.randomizeStats();\n            }, this.updateInterval);\n        }\n    },\n\n     \n\n}\n\n\nfunction valueToPoint(value, index, total) {\n    var x = 0;\n    var y = -value * 0.9;\n    var angle = ((Math.PI * 2) / total) * index;\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var tx = x * cos - y * sin + 100;\n    var ty = x * sin + y * cos + 100;\n    return { x: tx, y: ty };\n}\n\nfunction generatePoints(stats) {\n    var total = stats.length;\n    return stats .map(function(stat, index) {\n        var point = valueToPoint(stat, index, total);\n        return point.x + \",\" + point.y;\n    }) .join(\" \");\n}\n\n\n</script>\n\n<style>\n    svg {\n        display: block;\n    }\n    \n    polygon {\n        fill: #41b883;\n    }\n    circle {\n        fill: transparent;\n        stroke: #35495e;\n    }\n    input[type=\"range\"] {\n        display: block;\n        width: 25%;\n        margin-bottom: 15px;\n    }\n</style>    \n"],"sourceRoot":"src/components"}]}